import chainlit as cl
from dotenv import load_dotenv
from chainlit.input_widget import Select, TextInput, Switch

from llm_pentest.utils import get_project_root
from llm_pentest.chains import create_agent
from llm_pentest.models import setup_lm_studio, setup_gpt35, setup_gpt4
from llm_pentest.tools import tools

load_dotenv()


@cl.on_chat_start
async def main():
    await cl.ChatSettings(
        [
            TextInput(
                id="MachineIP",
                label="IP address of the target",
            ),
            Switch(
                id="Model",
                label="Use openAI?",
                initial=True,
            )
        ]
    ).send()


@cl.on_settings_update
async def setup_agent(settings):
    if settings["Model"]:
        agent = create_agent(setup_lm_studio(), tools, settings["MachineIP"])
    else:
        agent = create_agent(setup_gpt4(), tools, settings["MachineIP"])

    cl.user_session.set("MachineIP", settings["MachineIP"])
    cl.user_session.set("agent", agent)


@cl.on_message
async def respond(message):

    if not cl.user_session.get("agent"):
        await cl.Message(content="Please setup the agent first").send()
        return

    agent = cl.user_session.get("agent")
    message = message.content

    response = agent.invoke({"input": message})

    await cl.Message(content=response["output"]).send()